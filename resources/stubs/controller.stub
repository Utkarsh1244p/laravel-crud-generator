<?php

namespace App\Http\Controllers;

use App\Models\{{ model }};
use App\Traits\Response;
use Illuminate\Http\Request;

class {{ model }}Controller extends Controller
{
    use Response;

    public function index(Request $request)
    {
        try {
            $limit = $request->input('limit', 10);
            ${{ modelVariable }} = {{ model }}::latest()->paginate($limit);
            return $this->successResponse(${{ modelVariable }});
        } catch (\Exception $e) {
            return $this->errorResponse($e->getMessage());
        }
    }

    public function store(Request $request)
    {
        try {
            $validated = $request->validate([
                // Add validation rules here
            ]);

            ${{ modelVariable }} = {{ model }}::create($validated);
            return $this->successResponse(${{ modelVariable }}, '{{ model }} created successfully', self::CREATED);
        } catch (\Exception $e) {
            return $this->errorResponse($e->getMessage());
        }
    }

    public function show($id)
    {
        try {
            ${{ modelVariable }} = {{ model }}::find($id);
            
            if (!${{ modelVariable }}) {
                return $this->notFoundResponse();
            }

            return $this->successResponse(${{ modelVariable }});
        } catch (\Exception $e) {
            return $this->errorResponse($e->getMessage());
        }
    }

    public function update(Request $request, $id)
    {
        try {
            ${{ modelVariable }} = {{ model }}::find($id);
            
            if (!${{ modelVariable }}) {
                return $this->notFoundResponse();
            }

            $validated = $request->validate([
                // Add validation rules here
            ]);

            ${{ modelVariable }}->update($validated);
            return $this->successResponse(${{ modelVariable }}, '{{ model }} updated successfully');
        } catch (\Exception $e) {
            return $this->errorResponse($e->getMessage());
        }
    }

    public function destroy($id)
    {
        try {
            ${{ modelVariable }} = {{ model }}::find($id);
            
            if (!${{ modelVariable }}) {
                return $this->notFoundResponse();
            }

            ${{ modelVariable }}->delete();
            return $this->successResponse('{{ model }} deleted successfully', self::NO_CONTENT);
        } catch (\Exception $e) {
            return $this->errorResponse($e->getMessage());
        }
    }
}